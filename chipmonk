#!/bin/bash

# # # Chipmonk
# # # Author: Marshall Whittaker / oxagast
# # # Version: 1.3
# # # NUT (Network UPS Tools) Visual Power Dialog

function playball()
{
  trap clean_up EXIT
  log_ups
  syslog_popup
}

function clean_up()
{
  echo "Running cleanup, killing upslog..."
  pkill upslog
}

function set_perms()
{
  read -p "Would you like to give /usr/bin/upslog sgid nut? Warning! This is a potential security risk. " -n 1 -r
  echo # (optional) move to a new line
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    exit 1
  fi
  if [ $(whoami) == "root" ]; then
    echo "Fixing permissions for first run..."
    echo "Setting group permissions on /usr/bin/upslog"
    chown root:nut /usr/bin/upslog
    chmod g+s /usr/bin/upslog
    echo "Setup Complete!"
    echo "Now run me as your own user!"
    exit 0
  else
    echo "You need to be root to change /usr/bin/upslog perms, sorry!"
    exit 1
  fi
}

function startup()
{
  echo "Starting dialogs for $model"
  echo "Checking upslog permissions"
  # ls -al /usr/bin/upslog /var/log/ups.log
  touch /var/log/ups.log
  chmod g+rw /var/log/ups.log
  chown root:nut /var/log/ups.log
  if [[ $(stat -L -c "%A" /usr/bin/upslog | cut -c 7) == "s" ]]; then
    if [[ $(stat -c "%G" /usr/bin/upslog) == "nut" ]]; then
      playball
    fi
    echo "Sorry, UPS logging facility couldn't be set up properly..."
    syslog_popup
  else
    set_perms
  fi
}

function log_ups()
{
  if [[ $(stat -c "%A" /var/log/ups.log | cut -c 6) == "w" ]]; then
    if [[ $(stat -c "%G" /var/log/ups.log) == "nut" ]]; then
      echo "Starting detailed logger: /var/log/ups.log"
      upslog -l /var/log/ups.log -s $model -f "%host% %upshost% %time @Y-@M-@d @H:@M% STA:%VAR ups.status% CRG:%VAR battery.charge% INP:%VAR input.voltage% LOD:%VAR ups.load% TMP:%VAR ups.temperature%" || echo "Logging couldn't be established?"
    fi
  fi
}

function syslog_popup()
{
  f="/var/log/syslog"
  curr=$(<"$f")
  inotifywait -m -e modify "$f" --format "%e" | while read -r event 2>/dev/null; do
    echo "Monitoring syslog for UPS state changes"
    if [ "$event" == "MODIFY" ]; then
      prev="$curr"
      curr=$(cat "$f" | tail -n 1)
      [ "$curr" == "$prev" ] || if [ $(echo $curr | grep ": " | wc -l) -gt 0 ]; then
        powerline=$(echo $curr | grep $model | sed -e 's/.*UPS/UPS/')
        export DISPLAY=:0
        echod "$powerline" | xargs -I {X} kdialog --passivepopup {X} 30 2>&1 >/dev/null
        echo $powerline
      fi

    fi
  done
}

echo "# # # Chipmonk # # #"
echo "NUT (Network UPS Tools) Visual Power Dialogs"
echo "Author: Marshall Whittaker / oxagast"
logperm=2
if [[ "$#" -gt 1 ]]; then
  echo "You need to specify the NUT configured UPS model@hostname: "
  echo "    ./chipmonk.sh SK600@jerkon"
  exit 1
fi
if [[ "$#" -eq 0 ]]; then
  model=$(grep "[MODEL]" -A 1 ~/.chipmonk | tail -n 1 | tr -d '\n')
  if [ $(echo $model | grep ".@." | wc -l) -eq 1 ]; then
    startup
  fi
else
  if [[ "$#" -eq 1 ]]; then
    model=$1
    if [ $(echo $model | grep ".@." | wc -l) -eq 1 ]; then
      echo "[MODEL]" >~/.chipmonk
      echo $model >>~/.chipmonk
      startup
    fi
  fi
  echo "You need to specify the NUT configured UPS model@hostname: "
  echo "    ./chipmonk.sh SK600@jerkon"
  exit 1
fi
